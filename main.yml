image: node:latest

stages:
  - build
  - test
  - code_quality
  - code_format
  - coverage_check
  - email_notification

variables:
  NEXT_VERSION: "latest"
  COVERAGE_PERCENTAGE: "0" # Define COVERAGE_PERCENTAGE as a job variable
  COVERAGE_THRESHOLD: 80  # Adjust the threshold as needed
  EMAIL_RECIPIENT: "anilchukkala1994@gmail.com"

before_script:
  - npm install -g npm@latest
  - npm install

build:
  stage: build
  script:
    - echo "This is job name and pipeline id $CI_JOB_NAME && $CI_PIPELINE_ID" >> gitlab_details.txt
    - npm run build
    - ls -l ./.next
  artifacts:
    name: "$CI_JOB_ID"
    paths:
      - gitlab_details.txt

test:
  stage: test
  script:
    - npm run test:ci
    - npx jest --coverage --ci
    - ls -l coverage
  artifacts:
    name: "$CI_JOB_ID"
    paths:
      - gitlab_details.txt

code_quality:
  stage: code_quality
  script:
    - echo "This is job name and pipeline id $CI_JOB_NAME && $CI_PIPELINE_ID" >> gitlab_details.txt
    - npm install
    - npx eslint . --ext .js,.jsx,.ts,.tsx
  allow_failure: true
  artifacts:
    name: "$CI_JOB_ID"
    paths:
      - gitlab_details.txt

code_format:
  stage: code_format
  script:
    - npm run format
    - mvn checkstyle:checkstyle
    - cat checksyle-result.txt
  allow_failure: false
  only:
    - merge_requests
    - master
  artifacts:
    name: "$CI_JOB_ID"
    paths:
      - gitlab_details.txt

after_script:
  - |
    COVERAGE_REPORT_FILE="coverage/lcov-report/index.html"
    if [ -f "$COVERAGE_REPORT_FILE" ]; then
      COVERAGE_PERCENTAGE=$(cat "$COVERAGE_REPORT_FILE" | grep -oP '(?<=<strong>)[^%]+' | awk '{ print int($0) }')
      echo "COVERAGE_PERCENTAGE=$COVERAGE_PERCENTAGE" >> $CI_ENVIRONMENT_SLUG.env
    else
      echo "COVERAGE_REPORT_FILE not found."
    fi

email_failure_notification:
  stage: email_notification
  script:
    - |
      echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"
      echo "COVERAGE_PERCENTAGE: $COVERAGE_PERCENTAGE"
      echo "COVERAGE_THRESHOLD: $COVERAGE_THRESHOLD"

      if [ "$CI_PIPELINE_SOURCE" == "push" ] && [ "$COVERAGE_PERCENTAGE" -lt "$COVERAGE_THRESHOLD" ]; then
        echo "Sending email notification..."
        echo "The pipeline has failed due to low test coverage." | mail -s "Pipeline Failure - Test Coverage" anilchukkala1994@gmail.com
      else
        echo "No email notification sent."
      fi
  only:
    - branches
  when: always
